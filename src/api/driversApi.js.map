{"version":3,"sources":["api/driversApi.tsx"],"names":[],"mappings":"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","file":"api/driversApi.js","sourcesContent":["/*jshint strict:false */\r\n/* eslint camelcase: [\"error\", {properties: \"never\"}]*/\r\n/*jshint browserify: true */\r\n/* eslint-disable no-unused-vars*/\r\n/* eslint-disable */\r\n/* global $ jQuery require console module */\r\n/// <reference path=\"../../typings/index.d.ts\"/>\r\n\"use strict\";\r\n\r\n//This file is mocking a web API by hitting hard coded data.\r\nimport {drivers} from './data/drivers';\r\nvar _ = require('lodash');\r\nimport delay from './delay';\r\n\r\n//This would be performed on the server in a real app. Just stubbing in.\r\nvar _generateId = function (driver) {\r\n\treturn driver.firstName.toLowerCase() + '-' + driver.lastName.toLowerCase();\r\n};\r\n\r\nvar _clone = function (item) {\r\n\treturn JSON.parse(JSON.stringify(item)); //return cloned copy so that the item is passed by value instead of by reference\r\n};\r\n\r\nvar DriversApi = {\r\n\tgetAllDrivers: function () {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tresolve(Object.assign([], _clone(drivers)));\r\n\t\t\t}, delay);\r\n\t\t});\r\n\t\t// return _clone(drivers);\r\n\t},\r\n\r\n\tgetDriverById: function (id) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tvar driver = _.find(drivers, { id: id });\r\n\t\t\t\treturn resolve(_clone(driver));\r\n\t\t\t}, delay);\r\n\t\t});\r\n\t},\r\n\r\n\tsaveDriver: function (driver) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t//pretend an ajax call to web api is made here\r\n\t\t\tconsole.log('Pretend this just saved the driver to the DB via AJAX call...');\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (driver.id) {\r\n\t\t\t\t\tvar existingAuthorIndex = _.indexOf(drivers, _.find(drivers, { id: driver.id }));\r\n\t\t\t\t\tdrivers.splice(existingAuthorIndex, 1, driver);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Just simulating creation here.\r\n\t\t\t\t\t//The server would generate ids for new authors in a real app.\r\n\t\t\t\t\t//Cloning so copy returned is passed by value rather than by reference.\r\n\t\t\t\t\tdriver.id = _generateId(driver);\r\n\t\t\t\t\tdrivers.push(_clone(driver));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn resolve(driver);\r\n\t\t\t}, delay);\r\n\t\t});\r\n\t},\r\n\r\n\tdeleteDriver: function (id) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t   setTimeout(() => {\r\n               console.log('Pretend this just deleted the driver from the DB via an AJAX call...');\r\n\t\t\t   return resolve(_.remove(drivers, { id: id })[0]);\r\n\t\t   }, delay);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default DriversApi;"],"sourceRoot":"/source/"}