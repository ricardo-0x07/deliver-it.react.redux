{"version":3,"sources":["redux-actions/driverActions.tsx"],"names":[],"mappings":"AAAA,wBAAwB;AACxB,uDAAuD;AACvD,4BAA4B;AAC5B,kCAAkC;AAClC,oBAAoB;AACpB,4CAA4C;AAC5C,gDAAgD;AAChD,YAAY,CAAC;;AAEb,gDAA0C;AAC1C,qCAAuC;AACvC,yDAAkD;AAElD,2BAAkC,OAAO;IACrC,MAAM,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,oBAAoB,EAAE,OAAO,SAAA,EAAC,CAAC;AACvD,CAAC;AAFD,8CAEC;AAED,6BAAoC,MAAM;IACtC,MAAM,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,qBAAqB,EAAE,MAAM,QAAA,EAAC,CAAC;AACvD,CAAC;AAFD,kDAEC;AAED,6BAAoC,MAAM;IACtC,MAAM,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,qBAAqB,EAAE,MAAM,QAAA,EAAC,CAAC;AACvD,CAAC;AAFD,kDAEC;AAED,6BAAoC,MAAM;IACtC,MAAM,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,qBAAqB,EAAE,MAAM,QAAA,EAAC,CAAC;AACvD,CAAC;AAFD,kDAEC;AAED;IACI,MAAM,CAAC,UAAA,QAAQ;QACX,QAAQ,CAAC,iCAAa,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,oBAAS,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;YACzC,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC;aAED,KAAK,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAXD,kCAWC;AAED,sBAA6B,MAAM;IAC/B,MAAM,CAAC,UAAA,QAAQ;QACX,QAAQ,CAAC,iCAAa,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,oBAAS,CAAC,UAAU,CAAC,MAAM,CAAC;aAClC,IAAI,CAAC,UAAA,MAAM;YACR,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAXD,oCAWC;AAED,sBAA6B,MAAM;IAC/B,MAAM,CAAC,UAAA,QAAQ;QACX,QAAQ,CAAC,iCAAa,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,oBAAS,CAAC,UAAU,CAAC,MAAM,CAAC;aAClC,IAAI,CAAC,UAAA,MAAM;YACR,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAXD,oCAWC;AAED,sBAA6B,EAAE;IAC3B,MAAM,CAAC,UAAA,QAAQ;QACX,QAAQ,CAAC,iCAAa,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,oBAAS,CAAC,YAAY,CAAC,EAAE,CAAC;aAChC,IAAI,CAAC,UAAA,aAAa;YACf,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;YAC1D,QAAQ,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAZD,oCAYC","file":"redux-actions/driverActions.js","sourcesContent":["/*jshint strict:false */\n/* eslint camelcase: [\"error\", {properties: \"never\"}]*/\n/*jshint browserify: true */\n/* eslint-disable no-unused-vars*/\n/* eslint-disable */\n/* global $ jQuery require console module */\n/// <reference path=\"../../typings/index.d.ts\"/>\n\"use strict\";\n\nimport DriverApi from '../api/driversApi';\nimport * as types from './actionTypes';\nimport {beginAjaxCall} from './ajaxStatusActions';\n\nexport function loadDriverSuccess(drivers) {\n    return {type: types.LOAD_DRIVERS_SUCCESS, drivers};\n}\n\nexport function createDriverSuccess(driver) {\n    return {type: types.CREATE_DRIVER_SUCCESS, driver};\n}\n\nexport function deleteDriverSuccess(driver) {\n    return {type: types.DELETE_DRIVER_SUCCESS, driver};\n}\n\nexport function updateDriverSuccess(driver) {\n    return {type: types.UPDATE_DRIVER_SUCCESS, driver};\n}\n\nexport function loadDrivers() {\n    return dispatch => {\n        dispatch(beginAjaxCall());\n        return DriverApi.getAllDrivers().then(drivers => {\n            dispatch(loadDriverSuccess(drivers));\n        })\n\n        .catch(error => {\n            throw (error);\n        });\n    };\n}\n\nexport function createDriver(driver) {\n    return dispatch => {\n        dispatch(beginAjaxCall());\n        return DriverApi.saveDriver(driver)\n        .then(driver => {\n            dispatch(createDriverSuccess(driver));\n        })\n        .catch(error => {\n            throw (error);\n        });\n    };\n}\n\nexport function updateDriver(driver) {\n    return dispatch => {\n        dispatch(beginAjaxCall());\n        return DriverApi.saveDriver(driver)\n        .then(author => {\n            dispatch(updateDriverSuccess(driver));\n        })\n        .catch(error => {\n            throw (error);\n        });\n    };\n}\n\nexport function deleteDriver(id) {\n    return dispatch => {\n        dispatch(beginAjaxCall());\n        return DriverApi.deleteDriver(id)\n        .then(deletedDriver => {\n            console.log('driverActions deletedDriver', deletedDriver);\n            dispatch(deleteDriverSuccess(deletedDriver));\n        })\n        .catch(error => {\n            throw (error);\n        });\n    };\n}\n"],"sourceRoot":"/source/"}